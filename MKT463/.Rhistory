apply(expand.grid(rocky1Vec,rocky2Vec,rocky3Vec,rocky4Vec),1,paste,collapse=''))
ln(3)
log(3)
formulaSet = paste('Rocky.5~1',
apply(expand.grid(rocky1Vec,rocky2Vec,rocky3Vec,rocky4Vec),1,paste,collapse=''))
rocky1Vec = c('','+Rocky.1','+poly(Rocky.1,2)','+poly(Rocky.1,3)','+log(Rocky.1)')
rocky2Vec = c('','+Rocky.2','+poly(Rocky.2,2)','+poly(Rocky.2,3)','+log(Rocky.2)')
rocky3Vec = c('','+Rocky.3','+poly(Rocky.3,2)','+poly(Rocky.3,3)','+log(Rocky.3)')
rocky4Vec = c('','+Rocky.4','+poly(Rocky.4,2)','+poly(Rocky.4,3)','+log(Rocky.4)')
formulaSet = paste('Rocky.5~1',
apply(expand.grid(rocky1Vec,rocky2Vec,rocky3Vec,rocky4Vec),1,paste,collapse=''))
formulaSet
lm(as.formula(formulaSet[625]),data=ratings.clean)
?interaction
interaction('Rocky.1','Rocky.2', sep=":")
interaction('Rocky.1','Rocky.2','Rocky.3','Rocky.4', sep=":")
summary(lm(Rocky.5 ~ Rocky.1 + Rocky.2 + Rocky.3Rocky.4, data = ratings.clean))
summary(lm(Rocky.5 ~ Rocky.1 + Rocky.2 + Rocky.3:Rocky.4, data = ratings.clean))
inVec = c('+Rocky.1:Rocky.2','+Rocky.1:Rocky.3','+Rocky.1:Rocky.4','+Rocky.2:Rocky.3','+Rocky.2:Rocky.4',
'+Rocky.3:Rocky.4','+Rocky.1:Rocky.2:Rocky.3','+Rocky.1:Rocky.2:Rocky.3','+Rocky.1:Rocky.2:Rocky.3')
formulaSet = paste('Rocky.5~1',
apply(expand.grid(rocky1Vec,rocky2Vec,rocky3Vec,rocky4Vec,inVec),1,paste,collapse=''))
formulaSet
lm(as.formula(formulaSet[4625]),data=ratings.clean)
lm(as.formula(formulaSet[3625]),data=ratings.clean)
summary(lm(Rocky.5 ~ Rocky.1:Rocky.2:Rocky.3:Rocky.4, data = ratings.clean))
summary(lm(Rocky.5 ~ Rocky.1*Rocky.2*Rocky.3*Rocky.4, data = ratings.clean))
inVec1 = c('','+Rocky.1*Rocky.2*Rocky.3*Rocky.4')
inVec = c('+Rocky.1:Rocky.2','+Rocky.1:Rocky.3','+Rocky.1:Rocky.4','+Rocky.2:Rocky.3','+Rocky.2:Rocky.4',
'+Rocky.3:Rocky.4','+Rocky.1:Rocky.2:Rocky.3','+Rocky.1:Rocky.2:Rocky.3','+Rocky.1:Rocky.2:Rocky.3',
'+Rocky.1:Rocky.2:Rocky.4','+Rocky.2:Rocky.3:Rocky.4',,'+Rocky.1:Rocky.2:Rocky.3:Rocky.4')
inVec = c('+Rocky.1:Rocky.2','+Rocky.1:Rocky.3','+Rocky.1:Rocky.4','+Rocky.2:Rocky.3','+Rocky.2:Rocky.4',
'+Rocky.3:Rocky.4','+Rocky.1:Rocky.2:Rocky.3','+Rocky.1:Rocky.2:Rocky.3','+Rocky.1:Rocky.2:Rocky.3',
'+Rocky.1:Rocky.2:Rocky.4','+Rocky.2:Rocky.3:Rocky.4','+Rocky.1:Rocky.2:Rocky.3:Rocky.4')
formulaSet = paste('Rocky.5~1',
apply(expand.grid(rocky1Vec,rocky2Vec,rocky3Vec,rocky4Vec,inVec1),1,paste,collapse=''))
formulaSet
inVec = c('+Rocky.1:Rocky.2','+Rocky.1:Rocky.3','+Rocky.1:Rocky.4','+Rocky.2:Rocky.3','+Rocky.2:Rocky.4',
'+Rocky.3:Rocky.4','+Rocky.1:Rocky.2:Rocky.3','+Rocky.1:Rocky.2:Rocky.3','+Rocky.1:Rocky.2:Rocky.3',
'+Rocky.1:Rocky.2:Rocky.4','+Rocky.2:Rocky.3:Rocky.4','+Rocky.1:Rocky.2:Rocky.3:Rocky.4')
formulaSet = paste('Rocky.5~1',
apply(expand.grid(rocky1Vec,rocky2Vec,rocky3Vec,rocky4Vec,inVec),1,paste,collapse=''))
formulaSet
lm(as.formula(formulaSet[4625]),data=ratings.clean)
lm(as.formula(formulaSet[5625]),data=ratings.clean)
formulaSet = paste('Rocky.5~1',
apply(expand.grid(rocky1Vec,rocky2Vec,rocky3Vec,rocky4Vec,inVec1),1,paste,collapse=''))
formulaSet
MSE = function(x){
return(mean(x^2))
}
df_train <- read.csv(file="rockyDB - trainingData.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
df_test <- read.csv(file="rockyDB - validationData.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
View(df_train)
result <- list()
for(i in 1:20){
model <- lm(as.formula(formulaSet[i]),data=ratings.train)
result[[length(List)+1]] <- MSE(df_test$units - predict(model,df_test))
}
result <- list()
for(i in 1:20){
model <- lm(as.formula(formulaSet[i]),data=df_train)
result[[length(List)+1]] <- MSE(df_test$units - predict(model,df_test))
}
result <- list()
for(i in 1:20){
model <- lm(as.formula(formulaSet[i]),data=df_train)
result[[length(result)+1]] <- MSE(df_test$units - predict(model,df_test))
}
MSE = function(x){
return(mean(x^2))
}
result <- list()
for(i in 1:20){
model <- lm(as.formula(formulaSet[i]),data=df_train)
result[[length(result)+1]] <- MSE(df_test$units - predict(model,df_test))
}
View(df_test)
result <- list()
for(i in 1:20){
model <- lm(as.formula(formulaSet[i]),data=df_train)
result[[length(result)+1]] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
for(i in 1:length(formulaSet)){
model <- lm(as.formula(formulaSet[i]),data=df_train)
result[[length(result)+1]] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
min(result)
?min
ratings <- data.frame(formulaSet)
ratins$MSE <- NA
performance <- data.frame(formulaSet)
performance$MSE <- NA
lm(as.formula(performance[3625,1]),data=ratings.clean)
lm(as.formula(performance[3625,2]),data=ratings.clean)
performance[3625,2]
performance[3625,1]
View(performance)
str(performance[3625,1])
as.character(performance[3625,1])
performance[3625,1]
as.character(performance[3625,1])
as.character(performance[100,1])
lm(as.formula(as.character(performance[1005,2]),data=ratings.clean)
for(i in 1:length(formulaSet)){
model <- lm(as.formula([i]),data=df_train)
result[[length(result)+1]] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
min(result)
lm(as.formula(as.character(performance[1005,2])),data=ratings.clean)
lm(as.formula(performance[1005,2]),data=ratings.clean)
lm(as.formula(performance[1005,1]),data=ratings.clean)
lm(as.formula(as.character(performance[1005,1])),data=ratings.clean)
lm(as.formula(as.character(performance[1005,'formulaSet'])),data=ratings.clean)
for(i in 1:length(formulaSet)){
model <- lm(as.formula(as.character(performance[i,'formulaSet'])),data=df_train)
performance[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
warnings()
min(peformance$MSE)
min(performance$MSE)
best_index <- performance[which.min(performance$MSE),]
View(best_index)
performance.NN <- performance
for(i in 1:length(formulaSet)){
model <- nnet(as.formula(as.character(performance[i,'formulaSet'])),data=df_train,size = 3, linout = 1,maxit = 1000)
performance.NN[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
install.packages('nnet')
library('nnet')
for(i in 1:length(formulaSet)){
model <- nnet(as.formula(as.character(performance[i,'formulaSet'])),data=df_train,size = 3, linout = 1,maxit = 1000)
performance.NN[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
View(performance.NN)
best_index_lm <- performance[which.min(performance$MSE),]
best_index_NN <- performance[which.min(performance.NN$MSE),]
View(best_index_NN)
View(best_index_lm)
rpart(as.formula(as.character(performance[3,'formulaSet'])),data=df_train)
install.packages("rpart")
library('rpart')
rpart(as.formula(as.character(performance[3,'formulaSet'])),data=df_train)
MSE(df_test$Rocky.5 - predict(model,df_test))
for(i in 1:length(formulaSet)){
model <- rpart(as.formula(as.character(performance[i,'formulaSet'])),data=df_train)
performance.rpart[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
for(i in 1:length(formulaSet)){
model <- rpart(as.formula(as.character(performance[i,'formulaSet'])),data=df_train)
performance.rpart[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
for(i in 1:length(formulaSet)){
model <- rpart(as.formula(as.character(performance[3,'formulaSet'])),data=df_train)
performance.rpart[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
performance.rpart <- performance
for(i in 1:length(formulaSet)){
model <- rpart(as.formula(as.character(performance[i,'formulaSet'])),data=df_train)
performance.rpart[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
?debug
model <- rpart(as.formula(as.character(performance[1000,'formulaSet'])),data=df_train)
MSE(df_test$Rocky.5 - predict(model,df_test))
treeSet = paste('Rocky.5~1',
apply(expand.grid(rocky1Vec,rocky2Vec,rocky3Vec,rocky4Vec),1,paste,collapse=''))
performance.rpart <- data.frame(treeSet)
performance.rpart$MSE <- NA
for(i in 1:length(treeSet)){
model <- rpart(as.formula(as.character(performance[i,'formulaSet'])),data=df_train)
performance.rpart[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
for(i in 1:length(treeSet)){
model <- rpart(as.formula(as.character(performance[i,'treeSet'])),data=df_train)
performance.rpart[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
for(i in 1:length(treeSet)){
model <- rpart(as.formula(as.character(performance[i,'treeSet'])),data=df_train)
performance.rpart[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
for(i in 1:length(treeSet)){
model <- rpart(as.formula(as.character(performance[i,'treeSet'])),data=df_train)
performance.rpart[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
model <- rpart(as.formula(as.character(performance[1000,'formulaSet'])),data=df_train)
model <- rpart(as.formula(as.character(performance[100,'treeSet'])),data=df_train)
model <- rpart(as.formula(as.character(performance[11,'treeSet'])),data=df_train)
model <- rpart(as.formula(as.character(performance[11,'treeSet'])),data=df_train)
model <- rpart(as.formula(as.character(performance[1,'treeSet'])),data=df_train)
for(i in 1:length(treeSet)){
model <- rpart(as.formula(as.character(performance.rpart[i,'treeSet'])),data=df_train)
performance.rpart[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
model <- rpart(as.formula(as.character(performance.rpart[1,'treeSet'])),data=df_train)
model <- rpart(as.formula(as.character(performance.rpart[2,'treeSet'])),data=df_train)
MSE(df_test$Rocky.5 - predict(model,df_test))
model <- rpart(as.formula(as.character(performance.rpart[1,'treeSet'])),data=df_train)
View(performance.rpart)
View(performance.rpart)
treeSet = paste('Rocky.5~0',
apply(expand.grid(rocky1Vec,rocky2Vec,rocky3Vec,rocky4Vec),1,paste,collapse=''))
performance.rpart <- data.frame(treeSet)
performance.rpart$MSE <- NA
for(i in 1:length(treeSet)){
model <- rpart(as.formula(as.character(performance.rpart[i,'treeSet'])),data=df_train)
performance.rpart[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
model <- rpart(as.formula(as.character(performance.rpart[1,'treeSet'])),data=df_train)
View(performance.rpart)
treeSet = paste('Rocky.5~',
apply(expand.grid(rocky1Vec,rocky2Vec,rocky3Vec,rocky4Vec),1,paste,collapse=''))
performance.rpart <- data.frame(treeSet)
performance.rpart$MSE <- NA
for(i in 1:length(treeSet)){
model <- rpart(as.formula(as.character(performance.rpart[i,'treeSet'])),data=df_train)
performance.rpart[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
View(performance.rpart)
treeSet = paste('Rocky.5~ 1',
apply(expand.grid(rocky1Vec,rocky2Vec,rocky3Vec,rocky4Vec),1,paste,collapse=''))
performance.rpart <- data.frame(treeSet)
performance.rpart$MSE <- NA
for(i in 1:length(treeSet)){
model <- rpart(as.formula(as.character(performance.rpart[i,'treeSet'])),data=df_train)
performance.rpart[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
model <- rpart(as.formula(as.character(performance.rpart[2,'treeSet'])),data=df_train)
model <- rpart(as.formula(as.character(performance.rpart[3,'treeSet'])),data=df_train)
model <- rpart(as.formula(as.character(performance.rpart[100,'treeSet'])),data=df_train)
for(i in 2:length(treeSet)){
model <- rpart(as.formula(as.character(performance.rpart[i,'treeSet'])),data=df_train)
performance.rpart[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
best_index_rpart <- performance[which.min(performance.rpart$MSE),]
View(best_index_rpart)
View(best_index_NN)
View(best_index_lm)
df <- read.csv(file="recommendDB.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
summary(df)
columns <- c("consumerID","Rocky.1","Rocky.2","Rocky.3","Rocky.4","Rocky.5")
ratings <- matrix(nrow = length(unique(df$consumerID)),ncol = 6)
ratings <- data.frame(ratings)
colnames(ratings) <- columns
View(df)
View(best_index_lm)
formulaSet
rocky1Vec = c('','+Rocky.1','+poly(Rocky.1,2)','+poly(Rocky.1,3)','+poly(Rocky.1,4)','+log(Rocky.1)')
rocky2Vec = c('','+Rocky.2','+poly(Rocky.2,2)','+poly(Rocky.2,3)','+poly(Rocky.1,4)','+log(Rocky.2)')
rocky3Vec = c('','+Rocky.3','+poly(Rocky.3,2)','+poly(Rocky.3,3)','+poly(Rocky.1,4)','+log(Rocky.3)')
rocky4Vec = c('','+Rocky.4','+poly(Rocky.4,2)','+poly(Rocky.4,3)','+poly(Rocky.1,4)','+log(Rocky.4)')
inVec = c('+Rocky.1:Rocky.2','+Rocky.1:Rocky.3','+Rocky.1:Rocky.4','+Rocky.2:Rocky.3','+Rocky.2:Rocky.4',
'+Rocky.3:Rocky.4','+Rocky.1:Rocky.2:Rocky.3','+Rocky.1:Rocky.2:Rocky.3','+Rocky.1:Rocky.2:Rocky.3',
'+Rocky.1:Rocky.2:Rocky.4','+Rocky.2:Rocky.3:Rocky.4','+Rocky.1:Rocky.2:Rocky.3:Rocky.4')
formulaSet = paste('Rocky.5~1',
apply(expand.grid(rocky1Vec,rocky2Vec,rocky3Vec,rocky4Vec,inVec),1,paste,collapse=''))
for(i in 1:length(formulaSet)){
model <- lm(as.formula(as.character(performance[i,'formulaSet'])),data=df_train)
performance[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
best_index_lm <- performance[which.min(performance$MSE),]
View(best_index)
best_index_lm <- performance[which.min(performance$MSE),]
best_index_lm <- performance[which.min(performance$MSE),]
View(best_index)
for(i in 1:length(formulaSet)){
model <- nnet(as.formula(as.character(performance[i,'formulaSet'])),data=df_train,size = 3, linout = 1,maxit = 1000)
performance.NN[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
library('nnet')
for(i in 1:length(formulaSet)){
model <- nnet(as.formula(as.character(performance[i,'formulaSet'])),data=df_train,size = 3, linout = 1,maxit = 1000)
performance.NN[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
best_index_NN <- performance[which.min(performance.NN$MSE),]
View(best_index_NN)
rocky1Vec = c('','+Rocky.1','+poly(Rocky.1,2)','+poly(Rocky.1,3)','+poly(Rocky.1,4)','+log(Rocky.1)')
rocky2Vec = c('','+Rocky.2','+poly(Rocky.2,2)','+poly(Rocky.2,3)','+poly(Rocky.1,4)','+log(Rocky.2)')
rocky3Vec = c('','+Rocky.3','+poly(Rocky.3,2)','+poly(Rocky.3,3)','+poly(Rocky.1,4)','+log(Rocky.3)')
rocky4Vec = c('','+Rocky.4','+poly(Rocky.4,2)','+poly(Rocky.4,3)','+poly(Rocky.1,4)','+log(Rocky.4)')
inVec1 = c('','+Rocky.1*Rocky.2*Rocky.3*Rocky.4')
inVec = c('+Rocky.1:Rocky.2','+Rocky.1:Rocky.3','+Rocky.1:Rocky.4','+Rocky.2:Rocky.3','+Rocky.2:Rocky.4',
'+Rocky.3:Rocky.4','+Rocky.1:Rocky.2:Rocky.3','+Rocky.1:Rocky.2:Rocky.3','+Rocky.1:Rocky.2:Rocky.3',
'+Rocky.1:Rocky.2:Rocky.4','+Rocky.2:Rocky.3:Rocky.4','+Rocky.1:Rocky.2:Rocky.3:Rocky.4')
formulaSet = paste('Rocky.5~1',
apply(expand.grid(rocky1Vec,rocky2Vec,rocky3Vec,rocky4Vec,inVec1),1,paste,collapse=''))
for(i in 1:length(formulaSet)){
model <- lm(as.formula(as.character(performance[i,'formulaSet'])),data=df_train)
performance[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
best_index_lm <- performance[which.min(performance$MSE),]
View(best_index_lm)
best_index_NN <- performance[which.min(performance.NN$MSE),]
for(i in 1:length(formulaSet)){
model <- nnet(as.formula(as.character(performance[i,'formulaSet'])),data=df_train,size = 3, linout = 1,maxit = 1000)
performance.NN[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
size <- c(1,2,3,4,5)
size<- data.frame(size)
size <- c(1,2,3,4,5)
size<- data.frame(size)
?merge
?union
merge(performance.NN,size)
performance.NN <- merge(performance.NN,size)
View(performance.NN)
performance.NN[performance.NN$formulaSet == formulaSet[i] && performance.NN$size == 3]
performance.NN[performance.NN$formulaSet == formulaSet[i] && performance.NN$size == 3]
performance.NN[performance.NN$formulaSet == formulaSet[i] && performance.NN$size == 3,]
performance.NN[performance.NN$formulaSet == formulaSet[1] && performance.NN$size == 3,]
performance.NN[performance.NN$formulaSet == formulaSet[1] && performance.NN$size == 1,]
performance.NN[performance.NN$formulaSet == formulaSet[1] & performance.NN$size == 1,]
performance.NN[performance.NN$formulaSet == formulaSet[1] & performance.NN$size == 3,]
for(i in 1:length(formulaSet)){
for(j in 1:5){
model <- nnet(as.formula(as.character(performance[i,'formulaSet'])),data=df_train,size = j, linout = 1,maxit = 1000)
performance.NN[performance.NN$formulaSet == formulaSet[i] & performance.NN$size == j,] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
}
best_index_NN <- performance[which.min(performance.NN$MSE),]
View(best_index_NN)
View(performance.NN)
performance.NN[performance.NN$formulaSet == formulaSet[1] & performance.NN$size == 3,"MSE"]
performance.NN <- merge(performance.NN,size)
performance.NN <- performance
size <- c(1,2,3,4,5)
size<- data.frame(size)
performance.NN <- merge(performance.NN,size)
View(performance.NN)
for(i in 1:length(formulaSet)){
for(j in 1:5){
model <- nnet(as.formula(as.character(performance[i,'formulaSet'])),data=df_train,size = j, linout = 1,maxit = 1000)
performance.NN[performance.NN$formulaSet == formulaSet[i] & performance.NN$size == j,"MSE"] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
}
best_index_NN <- performance[which.min(performance.NN$MSE),]
View(best_index_NN)
View(performance.NN)
best_index_NN <- performance.NN[which.min(performance.NN$MSE),]
View(performance)
View(best_index_NN)
best_index_rpart <- performance.rpart[which.min(performance.rpart$MSE),]
View(performance.rpart)
View(best_index_rpart)
View(best_index_NN)
View(best_index_NN)
best_index_NN$formulaSet
df <- read.csv(file="recommendDB.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
df <- read.csv(file="recommendDB.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
summary(df)
columns <- c("consumerID","Rocky.1","Rocky.2","Rocky.3","Rocky.4","Rocky.5")
ratings <- matrix(nrow = length(unique(df$consumerID)),ncol = 6)
ratings <- data.frame(ratings)
colnames(ratings) <- columns
ratings$consumerID <- unique(df$consumerID)
for (i in 1:nrow(ratings)){
# subseting the df to find about rating for a specific user
rating <- df[df$consumerID == ratings$consumerID[i],]
for(j in 1:nrow(rating)){
#for each user find rating for the series.
if(rating$rockyID[j] == 1){
# Rocky1
ratings[i,2] <- rating$rating[j]
}
if(rating$rockyID[j] == 2){
# Rocky2
ratings[i,3] <- rating$rating[j]
}
if(rating$rockyID[j] == 3){
# Rocky3
ratings[i,4] <- rating$rating[j]
}
if(rating$rockyID[j] == 4){
# Rocky4
ratings[i,5] <- rating$rating[j]
}
if(rating$rockyID[j] == 5){
# Rocky5
ratings[i,6] <- rating$rating[j]
}
}
}
cov(ratings[c("Rocky.1","Rocky.2","Rocky.3","Rocky.4","Rocky.5")], use="pairwise.complete.obs")
colMeans(ratings[c("Rocky.1","Rocky.2","Rocky.3","Rocky.4","Rocky.5")], na.rm = TRUE,dims = 1)
ratings4 <- ratings[is.na(ratings$Rocky.4) == FALSE,]
colMeans(ratings4[c("Rocky.1","Rocky.2","Rocky.3","Rocky.4","Rocky.5")], na.rm = TRUE,dims = 1)
library('nnet')
library('rpart')
ratings.clean <- na.omit(ratings)
summary(lm(Rocky.5 ~ Rocky.1*Rocky.2*Rocky.3*Rocky.4, data = ratings.clean))
rocky1Vec = c('','+Rocky.1','+poly(Rocky.1,2)','+poly(Rocky.1,3)','+poly(Rocky.1,4)','+log(Rocky.1)')
rocky2Vec = c('','+Rocky.2','+poly(Rocky.2,2)','+poly(Rocky.2,3)','+poly(Rocky.1,4)','+log(Rocky.2)')
rocky3Vec = c('','+Rocky.3','+poly(Rocky.3,2)','+poly(Rocky.3,3)','+poly(Rocky.1,4)','+log(Rocky.3)')
rocky4Vec = c('','+Rocky.4','+poly(Rocky.4,2)','+poly(Rocky.4,3)','+poly(Rocky.1,4)','+log(Rocky.4)')
inVec1 = c('','+Rocky.1*Rocky.2*Rocky.3*Rocky.4')
formulaSet = paste('Rocky.5~1',apply(expand.grid(rocky1Vec,rocky2Vec,rocky3Vec,rocky4Vec,inVec1),1,paste,collapse=''))
MSE = function(x){
return(mean(x^2))
}
df_train <- read.csv(file="rockyDB - trainingData.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
df_test <- read.csv(file="rockyDB - validationData.csv", header=TRUE, sep=",", stringsAsFactors=FALSE)
performance.lm <- data.frame(formulaSet)
performance.lm$MSE <- NA
performance.NN <- performance
size <- c(1,2,3,4,5)
performance.NN <- performance.lm
size <- c(1,2,3,4,5)
size<- data.frame(size)
performance.NN <- merge(performance.NN,size)
treeSet = paste('Rocky.5~ 1',
apply(expand.grid(rocky1Vec,rocky2Vec,rocky3Vec,rocky4Vec),1,paste,collapse=''))
performance.rpart <- data.frame(treeSet)
performance.rpart$MSE <- NA
set.seed(90)
for(i in 1:length(formulaSet)){
model <- lm(as.formula(as.character(performance[i,'formulaSet'])),data=df_train)
performance[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
for(i in 1:length(formulaSet)){
model <- lm(as.formula(as.character(performance.lm[i,'formulaSet'])),data=df_train)
performance.lm[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
for(i in 1:length(formulaSet)){
for(j in 1:5){
model <- nnet(as.formula(as.character(performance[i,'formulaSet'])),data=df_train,size = j, linout = 1,maxit = 1000)
performance.NN[performance.NN$formulaSet == formulaSet[i] & performance.NN$size == j,"MSE"] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
}
model <- nnet(as.formula(as.character(performance.NN[i,'formulaSet'])),data=df_train,size = j, linout = 1,maxit = 1000)
for(i in 1:length(formulaSet)){
for(j in 1:5){
model <- nnet(as.formula(as.character(performance.NN[i,'formulaSet'])),data=df_train,size = j, linout = 1,maxit = 1000)
performance.NN[performance.NN$formulaSet == formulaSet[i] & performance.NN$size == j,"MSE"] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
}
for(i in 2:length(treeSet)){
model <- rpart(as.formula(as.character(performance.rpart[i,'treeSet'])),data=df_train)
performance.rpart[i,'MSE'] <- MSE(df_test$Rocky.5 - predict(model,df_test))
}
# find the best model in each case
best_index_lm <- performance[which.min(performance$MSE),]
best_index_NN <- performance.NN[which.min(performance.NN$MSE),]
best_index_rpart <- performance.rpart[which.min(performance.rpart$MSE),]
best_index_lm <- performance.lm[which.min(performance$MSE),]
best_index_lm <- performance.lm[which.min(performance.lm$MSE),]
best_index_NN <- performance.NN[which.min(performance.NN$MSE),]
best_index_rpart <- performance.rpart[which.min(performance.rpart$MSE),]
View(best_index_NN)
View(best_index_lm)
View(best_index_rpart)
best_index_lm$MSE # MSE =
best_index_NN$MSE # MSE
best_index_rpart$MSE #
chosenmodel <- nnet(as.formula(as.character(best_index_NN[0,'formulaSet'])),data=df_train,size = j, linout = 1,maxit = 1000)
View(best_index_NN)
chosenmodel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = j, linout = 1,maxit = 1000)
chosenmodel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = best_index_NN[1,'size'], linout = 1,maxit = 1000)
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = best_index_NN[1,'size'], linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
View(best_index_NN)
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = best_index_NN[1,'size'], linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = best_index_NN[1,'size'], linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
View(best_index_NN)
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
as.character(best_index_NN[1,'formulaSet']
best_index_NN[1,'formulaSet']
best_index_NN[1,'formulaSet']
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
save(chosenModel, 'chosenModel.Rdata')
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
View(performance.NN)
set.seed(90)
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
set.seed(90)
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
chosenModel <- nnet(as.formula(as.character(best_index_NN[0,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
set.seed(90)
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
set.seed(90)
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
set.seed(90)
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
chosenModel <- nnet(as.formula(as.character(best_index_NN[which.min(performance.lm$MSE),'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
set.seed(60)
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
set.seed(900)
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
set.seed(910)
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
set.seed(90)
chosenModel <- nnet(as.formula(as.character(best_index_NN[1,'formulaSet'])),data=df_train,size = 5, linout = 1,maxit = 1000)
MSE(df_test$Rocky.5 - predict(chosenModel,df_test))
MSE(df_test$Rocky.5 - predict(chosenModel,ratings.clean))
MSE(ratings.clean$Rocky.5 - predict(chosenModel,ratings.clean))
